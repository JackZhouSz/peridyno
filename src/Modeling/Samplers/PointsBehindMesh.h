/**
 * Copyright 2024 Shusen Liu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once
#include "Samplers/Sampler.h"
#include "Topology/PolygonSet.h"
#include "Topology/TriangleSet.h"
#include "Collision/NeighborPointQuery.h"
#include "Algorithm/Scan.h"

namespace dyno
{

	/*
	*	@brief£ºThe node is to generate Points benhind triangle meshes.
	*
	*	@Implementation:
	*		#Step1: Square plane regions are generating for each triangle mesh;
	*		#Step2: Caculate the basic vectors for every square plane region, and generate the candinite points in the square plane region;
	*		#Step3: Determine whether the candidate points are inside the triangular facet, and delete the points outside the relative meshes;
	*		#Step4:	Use remaining candidate points as seeds, and multi-layer Points are generated by expanding along the direction of mesh normals;
	*		#Step5: Remove the points that are too close;
	*		#Step6: Finished.
	*/


	template<typename TDataType>
	class PointsBehindMesh : public Sampler<TDataType>
	{
		DECLARE_TCLASS(PointsBehindMesh, TDataType);

	public:
		typedef typename TDataType::Real Real;
		typedef typename TDataType::Coord Coord;
		typedef typename TDataType::Matrix Matrix;
		typedef typename TopologyModule::Triangle Triangle;

		PointsBehindMesh();
		~PointsBehindMesh() override {};

		DEF_VAR(Real, Thickness, Real(0.2), "");

		DEF_VAR(Real, SamplingDistance, Real(0.05), "");

		DEF_VAR(bool, GeneratingDirection, true, "");

		DEF_INSTANCE_IN(TriangleSet<TDataType>, TriangleSet, "");

		DEF_ARRAY_STATE(Coord, Position, DeviceType::GPU, "");

		DEF_INSTANCE_STATE(TriangleSet<TDataType>, Plane, "");

		DEF_ARRAY_STATE(Coord, PointNormal, DeviceType::GPU, "Normal Vector of the point set");

		DEF_VAR_OUT(bool, PointGrowthDirection, "");

		DEF_ARRAY_STATE(int, PointBelongTriangleIndex, DeviceType::GPU, "");

		DEF_VAR_OUT(Real, SamplingDistance, "");

	protected:
		void resetStates() override;

	private:


		DArray<Coord> msquare_1, msquare_2, msquare_3, msquare_4;

		DArray<Coord> mBasicVector_x, mBasicVector_y, mBasicVector_z;

		DArray<Coord> mVerticesTempt;

		DArray<Triangle> mTriangleTempt;

		DArray<int> mThinPointSize;

		DArray<int> mThickPointSize;

		DArray<Coord> mThickPoints;

		DArray<Coord> mThinPoints;

		DArray<bool> mRemovingFlag;

		DArray<int> mPointOfTriangleId;

		DArray<int> mSeedOfTriangleId;

		DArray<Coord> mTriangleNormal;

		std::shared_ptr<NeighborPointQuery<TDataType>> m_NeighborPointQuery;

		Scan<int> scan;
	};

	IMPLEMENT_TCLASS(PointsBehindMesh, TDataType);
}