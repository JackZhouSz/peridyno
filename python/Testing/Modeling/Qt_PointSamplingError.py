import PyPeridyno as dyno

scn = dyno.SceneGraph()
scn.set_upper_bound(dyno.Vector3f([15.5, 15, 15.5]))
scn.set_lower_bound(dyno.Vector3f([-15.5, -15, -15.5]))

obj1 = dyno.SphereModel3f()
scn.add_node(obj1)
obj1.var_scale().set_value(dyno.Vector3f([0.7, 0.7, 0.7]))
obj1.var_type().set_current_key(1)
obj1.var_icosahedron_step().set_value(2)
obj1.var_location().set_value(dyno.Vector3f([-1, 0.5, 0]))
surfaceModule1 = obj1.graphics_pipeline().find_first_module_surface()
surfaceModule1.set_color(dyno.Color(0.2, 0.2, 0.2))
surfaceModule1.set_metallic(1)
surfaceModule1.set_roughness(0.8)

volume1 =  dyno.VolumeOctreeGenerator3f()
scn.add_node(volume1)
volume1.var_spacing().set_value(0.005)
obj1.state_triangle_set().promote_output().connect(volume1.in_triangleSet())

obj2 = dyno.SphereModel3f()
scn.add_node(obj2)
obj2.var_scale().set_value(dyno.Vector3f([0.45, 0.45, 0.45]))
obj2.var_type().set_current_key(1)
obj2.var_icosahedron_step().set_value(2)
obj2.var_location().set_value(dyno.Vector3f([0.418-1,0.5,0]))
obj2.set_visible(False)
surfaceModule2 = obj2.graphics_pipeline().find_first_module_surface()
surfaceModule2.set_color(dyno.Color(0.2, 0.2, 0.2))
surfaceModule2.set_metallic(1)
surfaceModule2.set_roughness(0.8)

volume2 =  dyno.VolumeOctreeGenerator3f()
scn.add_node(volume2)
volume2.var_spacing().set_value(0.005)
obj2.state_triangle_set().promote_output().connect(volume2.in_triangleSet())

volume_Sphere_Uniform = dyno.VolumeOctreeBoolean3f()
scn.add_node(volume_Sphere_Uniform)
volume_Sphere_Uniform.var_boolean_type().get_data_ptr().set_current_key(2)
volume1.connect(volume_Sphere_Uniform.import_octree_a())
volume2.connect(volume_Sphere_Uniform.import_octree_b())
# volume_Sphere_Uniform.graphics_pipeline().disable()

# Points = dyno.SdfSampler3f()
# scn.add_node(Points)
# Points.var_spacing().set_value(0.01)
# volume_Sphere_Uniform.connect(Points.import_volume())
#
# pointVisual = dyno.GLPointVisualModule()
# Points.state_point_set().promote_output().connect(pointVisual.in_point_set())
# pointVisual.var_point_size().set_value(0.007)
# pointVisual.var_base_color().set_value(dyno.Color(0.2, 0.2, 1))
# Points.graphics_pipeline().push_module(pointVisual)
#
# meshes_1 = dyno.SphereModel3f()
# scn.add_node(meshes_1)
# meshes_1.var_location().set_value(dyno.Vector3f([1, 0.5, 0]))
# meshes_1.var_latitude().set_value(16)
# meshes_1.var_longitude().set_value(12)
# meshes_1.var_scale().set_value(dyno.Vector3f([0.6, 0.6, 0.6]))
# meshes_1.var_type().set_current_key(1)
# meshes_1.var_icosahedron_step().set_value(2)
# meshes_1.set_visible(False)
# pointset_1 = dyno.PointsBehindMesh3f()
# scn.add_node(pointset_1)
# pointset_1.var_generating_direction().set_value(False)
# pointset_1.var_sampling_distance().set_value(0.005)
# pointset_1.var_thickness().set_value(0.045)
# meshes_1.state_triangle_set().connect(pointset_1.in_triangle_set())
#
# meshes_2 = dyno.CubeModel3f()
# scn.add_node(meshes_2)
# meshes_2.var_location().set_value(dyno.Vector3f([2, 0.5, 0]))
# meshes_2.var_scale().set_value(dyno.Vector3f([0.4, 0.4, 0.4]))
#
# pointset_2 = dyno.ParticleRelaxtionOnMesh3f()
# scn.add_node(pointset_2)
# pointset_2.var_iteration_number().set_value(80)
# pointset_2.var_sampling_distance().set_value(0.005)
# pointset_2.var_thickness().set_value(0.045)
# meshes_2.state_triangle_set().connect(pointset_2.in_triangle_set())
# pointset_2.graphics_pipeline().clear()
#
# ptRender = dyno.GLPointVisualModule()
# ptRender.set_color(dyno.Color(1, 0, 0))
# ptRender.set_color_map_mode(ptRender.ColorMapMode.PER_VERTEX_SHADER)
# pointset_2.state_point_set().connect(ptRender.in_point_set())
# pointset_2.graphics_pipeline().push_module(ptRender)
#
# obj3 = dyno.SphereModel3f()
# scn.add_node(obj3)
# obj3.var_scale().set_value(dyno.Vector3f([0.7, 0.7, 0.7]))
# obj3.var_type().set_current_key(1)
# obj3.var_icosahedron_step().set_value(2)
# obj3.var_location().set_value(dyno.Vector3f([0, 0.5, 0]))
# SurfaceModule4 = obj3.graphics_pipeline().find_first_module_surface()
# SurfaceModule4.set_color(dyno.Color(0.2, 0.2, 0.2))
# SurfaceModule4.set_metallic(1)
# SurfaceModule4.set_roughness(0.8)
#
# volume3 = dyno.VolumeOctreeGenerator3f()
# scn.add_node(volume3)
# volume3.var_spacing().set_value(0.005)
# obj3.state_triangle_set().promote_output().connect(volume3.in_triangleSet())

# obj4 = dyno.SphereModel3f()
# obj4.var_scale().set_value(dyno.Vector3f([0.45, 0.45, 0.45]))
# obj4.var_location().set_value(dyno.Vector3f([0.35, 0.5, 0]))
# obj4.var_type().set_current_key(1)
# obj4.var_icosahedron_step().set_value(2)
# SurfaceModule5 = obj4.graphics_pipeline().find_first_module_surface()
# SurfaceModule5.set_color(dyno.Color(0.2, 0.2, 0.2))
# SurfaceModule5.set_metallic(1)
# SurfaceModule5.set_roughness(0.8)
#
# volume4 = dyno.VolumeOctreeGenerator3f()
# scn.add_node(volume4)
# volume4.var_spacing().set_value(0.005)
# obj4.state_triangle_set().promote_output().connect(volume4.in_triangleSet())
#
# # volume_bool2 = dyno.VolumeOctreeBoolean3f()
# # scn.add_node(volume_bool2)
# # volume_bool2.var_boolean_type().get_data_ptr().set_current_key(volume_bool2.BooleanOperation.UNION_SET)
# # volume3.connect(volume_bool2.import_octree_a())
# # volume4.connect(volume_bool2.import_octree_b())
# # volume_bool2.graphics_pipeline().disable()
#
# # poissonPointSet = dyno.PoissonDiskSampling3f()
# # scn.add_node(poissonPointSet)
# # volume_bool2.connect(poissonPointSet.import_volume())



app = dyno.GlfwApp()
app.set_scenegraph(scn)
app.initialize(1366, 768, True)
app.main_loop()
