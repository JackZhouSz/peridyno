#version 450

#extension GL_GOOGLE_include_directive : enable
#include "SharedDataInParticleSystem.glsl"

#extension GL_EXT_debug_printf : enable

#include "../array/ArrayList.glsl"

layout(std430, binding = 0) buffer NumOut {
	uint counter[ ];
};

layout(std430, binding = 1) buffer EleOut {
	uint elements[ ];
};

layout(std430, binding = 2) buffer RadixOut {
	uint radix[ ];
};

layout(std430, binding = 3) buffer PosIn {
	vec3 position[ ];
};

layout (binding = 4) uniform HG {
	HashGrid grid;
};

layout (binding = 5) uniform PN {
	ArrayListInfo arrInfo;
};

layout (local_size_x = 64) in;

uint getSize(uint index, ArrayListInfo info)
{
    return index == info.arraySize - 1 ? info.totalSize - radix[index] : radix[index + 1] - radix[index];
}

uint getNeighborId(uint i, uint j)
{
    return elements[radix[i]+j];
}

void main() 
{
    uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= arrInfo.arraySize) 
		return;

    vec3 p = position[index];
	vec3 lo = vec3(-0.5, 0.0, -0.5);

	uint nx = grid.nx;
	uint ny = grid.ny;
	uint nz = grid.nz;

	float h = grid.h;

	int ix = int(floor((p.x - lo.x) / h));
	int iy = int(floor((p.y - lo.y) / h));
	int iz = int(floor((p.z - lo.z) / h));

	if(ix >= 0 && ix < grid.nx && iy >= 0 && iy < grid.ny && iz >= 0 && iz < grid.nz)
	{
		uint lx = clamp(ix - 1, 0, grid.nx - 1);
		uint hx = clamp(ix + 1, 0, grid.nx - 1);

		uint ly = clamp(iy - 1, 0, grid.ny - 1);
		uint hy = clamp(iy + 1, 0, grid.ny - 1);

		uint lz = clamp(iz - 1, 0, grid.nz - 1);
		uint hz = clamp(iz + 1, 0, grid.nz - 1);

		for(uint i = lx; i < hx; i++)
		{
			for(uint j = ly; j < hy; j++)
			{
				for(uint k = lz; k < hz; k++)
				{
					uint id = i + j * nx + k * nx * ny;

					uint size = getSize(id, arrInfo);
					for(uint ne = 0; ne < size; ne++)
					{
						uint t = getNeighborId(id, ne);
						vec3 p_j = position[t];

						if(length(p - p_j) < h)
							atomicAdd(counter[index], 1);
					}
				}
			}
		}

		
	}
}