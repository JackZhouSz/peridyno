#version 450

#extension GL_GOOGLE_include_directive : enable
#include "SharedDataInParticleSystem.glsl"

#extension GL_EXT_debug_printf : enable

layout(std430, binding = 0) buffer NumOut {
	uint counter[ ];
};

layout(std430, binding = 1) buffer PosIn {
	vec3 position[ ];
};

layout (binding = 2) uniform HG {
	HashGrid grid;
};

layout (binding = 3) uniform PN {
	uint posNum;
};

layout (local_size_x = 64) in;

void main() 
{
    uvec3 id = gl_GlobalInvocationID; 

	uint index = id.x;
	if (index >= posNum) 
		return;

    vec3 p = position[index];
	vec3 lo = vec3(-0.5, 0.0, -0.5);

	uint nx = grid.nx;
	uint ny = grid.ny;
	uint nz = grid.nz;

	float h = grid.h;

	int ix = int(floor((p.x - lo.x) / h));
	int iy = int(floor((p.y - lo.y) / h));
	int iz = int(floor((p.z - lo.z) / h));


	if(ix >= 0 && ix < grid.nx && iy >= 0 && iy < grid.ny && iz >= 0 && iz < grid.nz)
	{
		uint id = ix + iy * nx + iz * nx * ny;
		atomicAdd(counter[id], 1);
	}
}